#include <iostream>
#include <vector>
#include <cmath>
#include <climits>
#include <algorithm>
int findNearestCity(const std::vector<double>& distances, const std::vector<bool>& visited) {
    int nearestCity = -1;
    double minDistance = INT_MAX;
    int n = distances.size();
    for (int i = 0; i < n; ++i) {
        if (!visited[i] && distances[i] < minDistance) {
            minDistance = distances[i];
            nearestCity = i;
        }
    }
    return nearestCity;
}
std::vector<int> tspDijkstra(const std::vector<std::vector<double>>& graph) {
    int n = graph.size(); // Number of cities
    std::vector<bool> visited(n, false);
    std::vector<int> path;
    path.push_back(0); // Start from the first city
    visited[0] = true;

    for (int i = 0; i < n - 1; ++i) {
        int currentCity = path.back();
        double minDistance = INT_MAX;
        int nearestCity = -1;
        for (int j = 0; j < n; ++j) {
            if (!visited[j] && graph[currentCity][j] < minDistance) {
                minDistance = graph[currentCity][j];
                nearestCity = j;
            }
        }
        path.push_back(nearestCity);
        visited[nearestCity] = true;
    }
    return path;
}
int main() {
    int n; // Number of cities
    std::cout << "Enter the number of cities: ";
    std::cin >> n;
    std::vector<std::vector<double>> graph(n, std::vector<double>(n, 0.0));
    std::cout << "Enter the distances between cities:\n";
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            std::cin >> graph[i][j];
        }
    }
    std::vector<int> optimalPath = tspDijkstra(graph);
    std::cout << "Optimal Path: ";
    for (int city : optimalPath) {
        std::cout << city << " ";
    }
    std::cout << optimalPath[0] << "\n"; // Return to the starting city
    return 0;
}
