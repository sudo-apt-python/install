#include <iostream>
#include <vector>
#include <algorithm>
struct Edge {
    int src, dest, weight;
    Edge(int src, int dest, int weight) : src(src), dest(dest), weight(weight) {}
};
bool compareEdges(const Edge& a, const Edge& b) {
    return a.weight < b.weight;
}
int findParent(std::vector<int>& parent, int vertex) {
    if (parent[vertex] == -1)
        return vertex;
    return findParent(parent, parent[vertex]);
}
void unionSets(std::vector<int>& parent, int x, int y) {
    parent[x] = y;
}
void kruskalMST(std::vector<Edge>& edges, int V) {
    std::vector<int> parent(V, -1);
    std::vector<Edge> mst;
    std::sort(edges.begin(), edges.end(), compareEdges);
    for (const Edge& edge : edges) {
        int srcParent = findParent(parent, edge.src);
        int destParent = findParent(parent, edge.dest);
        if (srcParent != destParent) {
            mst.push_back(edge);
            unionSets(parent, srcParent, destParent);
        }
    }
    std::cout << "Minimum Spanning Tree:\n";
    for (const Edge& edge : mst) {
        std::cout << edge.src << " -- " << edge.dest << "   Weight: " << edge.weight << "\n";
    }
}
int main() {
    int V, E;
    std::cout << "Enter the number of vertices: ";
    std::cin >> V;
    std::cout << "Enter the number of edges: ";
    std::cin >> E;
    std::vector<Edge> edges;
    edges.reserve(E);
    for (int i = 0; i < E; i++) {
        int src, dest, weight;
        std::cout << "Enter edge " << i + 1 << " (source, destination, weight): ";
        std::cin >> src >> dest >> weight;
        edges.emplace_back(src, dest, weight);
    }
    kruskalMST(edges, V);
    return 0;
}
